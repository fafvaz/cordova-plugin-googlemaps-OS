def getConvertListe(useAndroidX) {
  def list = [
          ["com.google.android.gms.maps.model", "com.google.android.libraries.maps.model"],
          ["com.google.android.gms.maps", "com.google.android.libraries.maps"]
  ]

  if (!useAndroidX) {
    def tmp;
    def listN = list.size()
    for (int i = 0; i < listN; i++) {
      tmp = list[i][0]
      list[i][0] = list[i][1]
      list[i][1] = tmp
    }
  }
  return list
}


def searchFileInParents(target) {
  def searchPath = target
  for (int i = 0; i < 8; i++) {
    // println(searchPath)
    def targetFile = file(searchPath)
    if(!targetFile.canRead()) {
      searchPath = '../' + searchPath;
    } else {
      return targetFile;
    }
  }
  return null;
}

def replacePackages(file, cvtList, useAndroidX) {
  def filePath = file.toPath()
  def lines = java.nio.file.Files.readAllLines(filePath)
  def linesN = lines.size()
  def listN = cvtList.size()
  def anyChanges = false
  for (int i = 0; i < linesN; i++) {
    def line = lines.get(i)
    def needReplace = false;
    if (useAndroidX && line.contains('android.')) {
      needReplace = true
    } else if (!useAndroidX && line.contains('android')) {
      needReplace = true
    }
    if (needReplace) {
      for (int j = 0; j < listN; j++) {
        if (line.contains(cvtList[j][0])) {
          anyChanges = true
          line = line.replaceAll(cvtList[j][0], cvtList[j][1])
        }
      }
      lines.set(i, line)
    }
  }

  if (anyChanges) {
    println(" [changed] " + file)
    def fileWriter = new FileWriter(file)
    def output = new BufferedWriter(fileWriter)
    for (int i = 0; i < linesN; i++) {
      output.writeLine(lines.get(i))
    }
    output.flush()
    output.close()
    fileWriter.close()
  }

}
def replaceFiles(matchingPattern, cvtList, useAndroidX) {

  PatternFilterable patternSet = new PatternSet();
  patternSet.include(matchingPattern);

  def matchedFile = project.files(project.getProjectDir().getParentFile().toPath()).getAsFileTree().matching(patternSet)
  matchedFile.each { file ->
    if (!java.nio.file.Files.isReadable(file.toPath())) {
      return
    }

    replacePackages(file, cvtList, useAndroidX)
  }
}
public class PgmEnv {
  protected def configFilePath;
  protected def frameworkName;
  protected def configs;

  PgmEnv(fname) {
    this.frameworkName = fname;
    this.configs = new Properties()
  }

  public getConfigFilePath() {
    return this.configFilePath;
  }
  public getEnvName() {
    return this.frameworkName;
  }

  public getConfig(name) {
    return this.configs.getProperty(name)
  }

  public getConfigOrDefault(name, defaultValue) {
    def result = this.configs.getProperty(name)
    if (result == null) {
      result = defaultValue;
    }
    return result;
  }
}

public class PgmCapacitorEnv extends PgmEnv {


  PgmCapacitorEnv(configPath) {
    super("capacitor");
    this.configFilePath = configPath;
    this.parseConfigFile();
  }

  public parseConfigFile() {
    def jsonFile = new File("${this.configFilePath}")

    def parser = new groovy.json.JsonSlurper()
    def json = parser.parse(jsonFile)

    if (!json.googlemaps) {
      throw new Error("Please add googlemaps.GOOGLE_MAPS_ANDROID_API_KEY in capacitor.config.json file")
    }

    this.configs.clear();
    for (key in json.googlemaps.keySet()) {
      this.configs.setProperty(key, json.googlemaps[key])
    }
  }
}

class PgmCordovaEnv extends PgmEnv {
  PgmCordovaEnv(configPath) {
    super("cordova");
    this.configFilePath = configPath;
    this.parseConfigFile();
  }

  public parseConfigFile() {

    // parse xml file
    def is = new FileInputStream("${this.configFilePath}")
    def widget = new XmlParser().parse(is)
    if (widget.preference == null) {
      throw new GradleException("widget is null.")
    }

    this.configs.clear();
    widget.preference.each { pref ->
      def name = pref.attributes().name
      def value = pref.attributes().value
      this.configs.setProperty(name, value)
    }
    is.close()
  }

}

def detectEnvironment() {
  //--------------------------------------------
  // Decide the framework environment
  //--------------------------------------------

  def framework = ""
  def configFilePath = ""
  def list = [
    ["capacitor.config.json", "capacitor"],
    ["config.xml", "cordova"],
    ["app/src/main/res/xml/config.xml", "cordova"]
  ]

  def listN = list.size()
  for (int i = 0; i < listN; i++) {
    def filePath = searchFileInParents(list[i][0]);
    if (filePath) {
      framework = list[i][1]
      configFilePath = filePath
      break;
    }
  }


  def result = null;
  if ("cordova".equals(framework)) {
    result = new PgmCordovaEnv(configFilePath);
  } else if ("capacitor".equals(framework)) {
    result = new PgmCapacitorEnv(configFilePath);
  } else {
    throw new Error("Can not detect the environment")
  }

  return result;
}


android {

  def env = detectEnvironment()

  //----------------------
  // Retrieve the API key
  //----------------------
  def GOOGLE_MAPS_ANDROID_API_KEY = env.getConfig('GOOGLE_MAPS_ANDROID_API_KEY');
  if (!GOOGLE_MAPS_ANDROID_API_KEY) {
    throw new Error("Can not found 'GOOGLE_MAPS_ANDROID_API_KEY' in ${env.getConfigFilePath()}")
  }

  //------------------------------
  // Adjust dependenciy libraries
  //------------------------------
  def hasUseAndroidX = project.ext.has('android.useAndroidX')
  def hasEnableJetifier = project.ext.has('android.enableJetifier')
  def useAndroidX = hasUseAndroidX && hasEnableJetifier &&
          'true' == project.ext.get('android.useAndroidX') &&
          'true' == project.ext.get('android.enableJetifier')

  if (useAndroidX) {
    dependencies {
      implementation 'com.google.android.libraries.maps:maps:3.1.0-beta'
      implementation 'com.android.support:multidex:1.0.3'
    }

    defaultConfig {
      multiDexEnabled true
    }
  } else {
    def PLAY_SERVICES_LOCATION_VERSION = env.getConfigOrDefault("GOOGLE_MAPS_PLAY_SERVICES_LOCATION_VERSION", "16.0.0")
    def PLAY_SERVICES_VERSION = env.getConfigOrDefault("GOOGLE_MAPS_PLAY_SERVICES_VERSION", "16.1.0")
    def ANDROID_SUPPORT_V4_VERSION = env.getConfigOrDefault("GOOGLE_MAPS_ANDROID_SUPPORT_V4_VERSION", "27.1.1")

    dependencies {
      implementation "com.google.android.gms:play-services-location:${PLAY_SERVICES_LOCATION_VERSION}"
      implementation "com.google.android.gms:play-services-maps:${PLAY_SERVICES_VERSION}"
      implementation "com.android.support:support-core-utils:${ANDROID_SUPPORT_V4_VERSION}"
    }
  }

  //-----------------------------------------------
  // Replace the source code of this plugin
  //-----------------------------------------------
  def cvtList = getConvertListe(useAndroidX)

  replaceFiles("**/plugin/google/maps/*.java", cvtList, useAndroidX)

  //-------------------------------------------
  // Set the API key into AndroidManifest.xml
  //-------------------------------------------
  buildTypes {
    debug {
      manifestPlaceholders.GOOGLE_MAPS_ANDROID_API_KEY = GOOGLE_MAPS_ANDROID_API_KEY
    }
    release {
      manifestPlaceholders.GOOGLE_MAPS_ANDROID_API_KEY = GOOGLE_MAPS_ANDROID_API_KEY
    }
  }
}
